Metadata-Version: 2.4
Name: project-3
Version: 0.1.0
Requires-Python: >=3.12
Description-Content-Type: text/markdown
Requires-Dist: pytest==8.3.4
Requires-Dist: pytest-cov==6.0.0
Requires-Dist: black==24.10.0
Requires-Dist: ruff==0.8.4
Requires-Dist: pylint==3.3.2
Requires-Dist: flake8==7.1.1
Requires-Dist: flake8-pyproject>=1.2.3
Requires-Dist: mypy==1.13.0
Requires-Dist: complexipy==1.2.0
Requires-Dist: isort==5.13.2
Requires-Dist: mkdocs==1.6.1
Requires-Dist: mkdocs-material==9.5.49
Requires-Dist: hydra-core>=1.3.2
Requires-Dist: matplotlib>=3.10.6
Requires-Dist: numpy>=2.3.3
Requires-Dist: torch>=2.8.0
Requires-Dist: torchvision>=0.23.0
Requires-Dist: requests>=2.32.3
Requires-Dist: pillow>=11.3.0
Requires-Dist: ipykernel>=6.30.1
Requires-Dist: types-requests>=2.32.4.20250913

# Ejercicios CVII - Computer Vision

Este repositorio contiene implementaciones de algoritmos de visión por computador organizados de forma modular.

## Estructura del Proyecto

```
ejercicios-CVII/
├── src/                          # Código fuente organizado por módulos
│   ├── explainability/          # Métodos de explicabilidad (saliency maps, etc.)
│   ├── upsampling/              # Técnicas de upsampling
│   ├── representations/         # Representaciones 3D (depth maps, point clouds, etc.)
│   ├── models/                  # Arquitecturas de redes neuronales
│   ├── style_transfer/          # Métodos de transferencia de estilo
│   └── utils/                   # Utilidades generales
├── tests/                       # Tests con pytest
├── requirements.txt             # Dependencias del proyecto
└── README.md                   # Esta documentación
```

## Instalación

1. Instalar las dependencias:
```bash
pip install -r requirements.txt
```

2. Agregar el directorio raíz al PYTHONPATH (opcional):
```bash
export PYTHONPATH="${PYTHONPATH}:$(pwd)"
```

## Ejecutar Tests

Los tests verifican que todas las implementaciones personalizadas producen resultados idénticos a los equivalentes de PyTorch/sklearn.

### Ejecutar todos los tests:
```bash
pytest tests/ -v
```

### Ejecutar tests específicos:
```bash
# Tests de upsampling
pytest tests/test_upsampling.py -v

# Tests de métodos de detección
pytest tests/test_detection_utils.py -v

# Tests de métricas
pytest tests/test_metrics.py -v

# Tests de representaciones 3D
pytest tests/test_representations.py -v

# Tests de explicabilidad
pytest tests/test_explainability.py -v

# Tests de modelos
pytest tests/test_models.py -v

# Tests de transferencia de estilo
pytest tests/test_style_transfer.py -v
```

### Ejecutar tests con cobertura:
```bash
pytest tests/ --cov=src --cov-report=html
```

## Módulos Implementados

### 1. Explainability (`src/explainability/`)
- **saliency_maps.py**: Mapas de saliencia (básico, max, L2)
- **input_x_gradient.py**: Método Input × Gradient
- **integrated_gradients.py**: Gradientes integrados

### 2. Upsampling (`src/upsampling/`)
- **bed_of_nails.py**: Upsampling "cama de clavos"
- **nearest_neighbor.py**: Interpolación por vecino más cercano
- **bilinear_interpolation.py**: Interpolación bilineal
- **max_unpooling.py**: Max unpooling con índices

### 3. Utils (`src/utils/`)
- **detection_utils.py**: IoU, NMS
- **metrics.py**: F1 Score, Dice coefficient, IoU, Pixel accuracy
- **normalization.py**: Normalización de datos

### 4. Representations (`src/representations/`)
- **depth_maps.py**: Mapas de profundidad
- **surface_normals.py**: Normales de superficie
- **point_clouds.py**: Nubes de puntos
- **voxels.py**: Representaciones voxel

### 5. Models (`src/models/`)
- **simple_conv_net.py**: Red convolucional simple
- **resnet.py**: ResNet y bloques residuales
- **unet.py**: U-Net para segmentación
- **vgg.py**: VGG y bloques VGG
- **attention.py**: Mecanismos de atención y transformer

### 6. Style Transfer (`src/style_transfer/`)
- **content_loss.py**: Pérdida de contenido
- **style_loss.py**: Pérdida de estilo (Gram matrix)
- **total_variation_loss.py**: Pérdida de variación total
- **perceptual_loss.py**: Pérdida perceptual
- **feature_extractor.py**: Extractor de características

## Características de los Tests

- **Verificación de equivalencia**: Todos los tests comparan las implementaciones personalizadas con las equivalentes de PyTorch/sklearn
- **Tests de forma y tipo**: Verifican que las salidas tengan las dimensiones y tipos correctos
- **Tests de casos extremos**: Incluyen pruebas con entradas especiales (ceros, etc.)
- **Tests parametrizados**: Prueban múltiples tamaños de entrada y configuraciones
- **Tests de gradientes**: Verifican que los gradientes fluyan correctamente

## Uso de Ejemplo

```python
# Upsampling
from src.upsampling.bilinear_interpolation import bilinear_interpolation
import torch

x = torch.randn(1, 3, 32, 32)
upsampled = bilinear_interpolation(x, scale_factor=2)

# Saliency maps
from src.explainability.saliency_maps import SaliencyMaps
import torch.nn as nn

model = nn.Sequential(nn.Conv2d(3, 10, 3), nn.AdaptiveAvgPool2d(1), nn.Flatten(), nn.Linear(10, 5))
saliency = SaliencyMaps(model)
image = torch.randn(1, 3, 32, 32, requires_grad=True)
saliency_map = saliency(image, target_class=0)

# Métricas
from src.utils.metrics import dice_coefficient

y_true = torch.randint(0, 2, (100, 100))
y_pred = torch.randint(0, 2, (100, 100))
dice = dice_coefficient(y_pred, y_true)
```

## Notas de Desarrollo

- Todas las funciones están diseñadas para trabajar con tensores de PyTorch
- Se mantiene compatibilidad con GPU cuando está disponible
- Los algoritmos incluyen variantes cuando están implementadas (se mantienen en el mismo archivo)
- Los tests incluyen fixtures para dispositivos (CPU/GPU) y datos de prueba comunes
- Se usan tolerancias apropiadas para comparaciones numéricas en punto flotante
